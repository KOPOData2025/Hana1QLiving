<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.hana_bank.mapper.AccountTransactionMapper">

    <resultMap id="accountTransactionResultMap" type="com.example.hana_bank.entity.AccountTransaction">
        <id property="id" column="id"/>
        <result property="accountNumber" column="account_number"/>
        <result property="transactionType" column="transaction_type"/>
        <result property="amount" column="amount"/>
        <result property="balanceBefore" column="balance_before"/>
        <result property="balanceAfter" column="balance_after"/>
        <result property="transactionId" column="transaction_id"/>
        <result property="description" column="description"/>
        <result property="relatedAccount" column="related_account"/>
        <result property="relatedBankCode" column="related_bank_code"/>
        <result property="relatedBankName" column="related_bank_name"/>
        <result property="category" column="category"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 거래내역 생성 -->
    <insert id="insertAccountTransaction" parameterType="com.example.hana_bank.entity.AccountTransaction">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT ACCOUNT_TRANSACTION_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO account_transactions (
            id, account_number, transaction_type, amount, balance_before, balance_after,
            transaction_id, description, related_account, related_bank_code, related_bank_name,
            category, status, created_at, updated_at
        ) VALUES (
            #{id}, #{accountNumber}, #{transactionType}, #{amount}, #{balanceBefore}, #{balanceAfter},
            #{transactionId}, #{description}, #{relatedAccount}, #{relatedBankCode}, #{relatedBankName},
            #{category}, #{status}, SYSDATE, SYSDATE
        )
    </insert>

    <!-- ID로 거래내역 조회 -->
    <select id="findById" parameterType="long" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions WHERE id = #{id}
    </select>

    <!-- 거래번호로 거래내역 조회 -->
    <select id="findByTransactionId" parameterType="string" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions WHERE transaction_id = #{transactionId}
    </select>

    <!-- 계좌번호로 거래내역 목록 조회 -->
    <select id="findByAccountNumber" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions
        WHERE account_number = #{accountNumber}
        ORDER BY created_at DESC
        <if test="limit != null and offset != null">
            OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <!-- 계좌번호와 기간으로 거래내역 조회 -->
    <select id="findByAccountNumberAndDateRange" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions
        WHERE account_number = #{accountNumber}
        <if test="startDate != null">
            AND created_at &gt;= #{startDate}
        </if>
        <if test="endDate != null">
            AND created_at &lt;= #{endDate}
        </if>
        ORDER BY created_at DESC
        <if test="limit != null and offset != null">
            OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <!-- 계좌번호와 거래타입으로 거래내역 조회 -->
    <select id="findByAccountNumberAndType" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions
        WHERE account_number = #{accountNumber}
        AND transaction_type = #{transactionType}
        ORDER BY created_at DESC
        <if test="limit != null and offset != null">
            OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <!-- 계좌번호와 카테고리로 거래내역 조회 -->
    <select id="findByAccountNumberAndCategory" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions
        WHERE account_number = #{accountNumber}
        AND category = #{category}
        ORDER BY created_at DESC
        <if test="limit != null and offset != null">
            OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <!-- 계좌번호별 거래내역 개수 조회 -->
    <select id="countByAccountNumber" parameterType="string" resultType="long">
        SELECT COUNT(*) FROM account_transactions WHERE account_number = #{accountNumber}
    </select>

    <!-- 계좌번호와 기간별 거래내역 개수 조회 -->
    <select id="countByAccountNumberAndDateRange" resultType="long">
        SELECT COUNT(*) FROM account_transactions
        WHERE account_number = #{accountNumber}
        <if test="startDate != null">
            AND created_at &gt;= #{startDate}
        </if>
        <if test="endDate != null">
            AND created_at &lt;= #{endDate}
        </if>
    </select>

    <!-- 상대방 계좌와의 거래내역 조회 (이체 내역) -->
    <select id="findTransfersBetweenAccounts" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions
        WHERE (account_number = #{fromAccount} AND related_account = #{toAccount})
           OR (account_number = #{toAccount} AND related_account = #{fromAccount})
        AND transaction_type IN ('TRANSFER_OUT', 'TRANSFER_IN')
        ORDER BY created_at DESC
        <if test="limit != null and offset != null">
            OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <!-- 거래내역 상태 업데이트 -->
    <update id="updateStatus">
        UPDATE account_transactions
        SET status = #{status}, updated_at = SYSDATE
        WHERE id = #{id}
    </update>

    <!-- 거래내역 수정 -->
    <update id="updateAccountTransaction" parameterType="com.example.hana_bank.entity.AccountTransaction">
        UPDATE account_transactions SET
            description = #{description},
            category = #{category},
            status = #{status},
            updated_at = SYSDATE
        WHERE id = #{id}
    </update>

    <!-- 거래내역 삭제 -->
    <delete id="deleteAccountTransaction" parameterType="long">
        DELETE FROM account_transactions WHERE id = #{id}
    </delete>

    <!-- 특정 거래번호 존재 여부 확인 -->
    <select id="existsByTransactionId" parameterType="string" resultType="boolean">
        SELECT CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END
        FROM account_transactions
        WHERE transaction_id = #{transactionId}
    </select>

    <!-- 최근 거래내역 조회 (최신순) -->
    <select id="findRecentTransactions" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions
        WHERE account_number = #{accountNumber}
        ORDER BY created_at DESC
        <if test="limit != null">
            OFFSET 0 ROWS FETCH NEXT #{limit} ROWS ONLY
        </if>
    </select>

    <!-- 월별 거래내역 조회 -->
    <select id="findMonthlyTransactions" resultMap="accountTransactionResultMap">
        SELECT * FROM account_transactions
        WHERE account_number = #{accountNumber}
        AND EXTRACT(YEAR FROM created_at) = #{year}
        AND EXTRACT(MONTH FROM created_at) = #{month}
        ORDER BY created_at DESC
    </select>

</mapper>